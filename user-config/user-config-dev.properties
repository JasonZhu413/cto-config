test.pro=haha1

########### Feign RPC ##############
#开启Hystrix断路器
feign.hystrix.enabled=true

########### Ribbon客户端负载均衡 ##############
# 是否开启Eureka负载均衡, 默认true
#ribbon.eureka.enabled=true
# 建立连接超时时间
ribbon.ConnectTimeout=250
# 建立连接后从服务器读取到可用资源所用时间
ribbon.ReadTimeout=10000
# 是否开启重试, 默认false
spring.cloud.loadbalancer.retry.enabled=true
# 是否所有操作都重试
ribbon.OkToRetryOnAllOperations=true
# 重试发生，更换节点数最大值
ribbon.MaxAutoRetriesNextServer=6
# 单个节点重试最大值
ribbon.MaxAutoRetries=1

########### Swagger & Markup ##############
swagger.title=用户服务接口文档
swagger.description=CTO用户服务接口文档
swagger.termsOfServiceUrl=https://www.6zcto.com
swagger.contact=6zCTO
swagger.website=https://www.6zcto.com
swagger.email=6zcto@6zcto.com
swagger.version=1.0
# markup是否生效, 默认false
swagger.markup.enable=true
# 文档目录, 默认项目根目录
swagger.markup.folder=D:/File/cto/user

########### Hystrix断路器 ##############
# 是否启用超时，默认启用true
hystrix.command.default.execution.timeout.enabled=true
# 执行超时时间，默认1000ms
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=10000

# 具体方法的超时时间
#hystrix.command.yourMethod.execution.isolation.thread.timeoutInMilliseconds=3000
# 默认启用除shutdown所有端点
#management.endpoints.web.exposure.include=*
# 发生超时是是否中断，默认true
#hystrix.command.default.execution.isolation.thread.interruptOnTimeout

### 隔离策略 ###
# 隔离策略，默认是Thread, 可选Thread(线程隔离)、Semaphore(信号量隔离)
#hystrix.command.default.execution.isolation.strategy
# 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效;
# 若达到最大并发请求数，请求会被拒绝。理论上选择Semaphore size的原则和选择Thread size一致;
# *但选用semaphore时每次执行的‘单元要小’且‘执行速度快(ms级)’，否则使用Thread。
#hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 
# 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback(), 默认true
#hystrix.command.default.fallback.enabled 
# 若并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用, 默认10
#hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests 

### 熔断器Circuit Breaker ###
# 跟踪circuit健康性，若未达标则让request短路, 默认true
#hystrix.command.default.circuitBreaker.enabled
# 一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内
# 例: 倘若1个rolling window是10秒, 收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20
#hystrix.command.default.circuitBreaker.requestVolumeThreshold
# 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000
#hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 
# 错误比率阀值，如果错误率>=该值，circuit会被打开，并短路所有请求触发fallback。默认50
#hystrix.command.default.circuitBreaker.errorThresholdPercentage
# 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false
#hystrix.command.default.circuitBreaker.forceOpen 
# 强制关闭熔断器 如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage
#hystrix.command.default.circuitBreaker.forceClosed 

### Metrics翻译信息 ###
# 统计的时间窗口值的(毫秒值), circuit break 的打开会根据1个rolling window的统计来计算。
# 若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000
#hystrix.command.default.metrics.rollingStats.timeInMilliseconds 
# 单个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10
#hystrix.command.default.metrics.rollingStats.numBuckets 
# 执行时是否enable指标的计算和跟踪，默认true
#hystrix.command.default.metrics.rollingPercentile.enabled 
# rolling percentile window的时间，默认60000
#hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds 
# rolling percentile window的numberBuckets。逻辑同上。默认6
#hystrix.command.default.metrics.rollingPercentile.numBuckets 
# 若bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100
#hystrix.command.default.metrics.rollingPercentile.bucketSize 
# 记录health 快照（用来统计成功和错误绿）的间隔，默认500ms
#hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds 

### 请求信息 ###
# 需要重载getCacheKey()，返回null时不缓存, 默认true
#hystrix.command.default.requestCache.enabled 
# 记录日志到HystrixRequestLog，默认true
#hystrix.command.default.requestLog.enabled 

#Collapser Properties 相关参数
#hystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE
#hystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10
#hystrix.collapser.default.requestCache.enabled 是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true

### 线程池 ###
# 并发执行的最大线程数，默认10 (基本原则保持线程池尽可能小，主要为了释放压力，防止资源被阻塞)
#hystrix.threadpool.default.coreSize 
# BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。
# 该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。
#hystrix.threadpool.default.maxQueueSize 
# 即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，
# 这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用
#hystrix.threadpool.default.queueSizeRejectionThreshold 
# 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。
# 如果通过plugin（https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1.
#hystrix.threadpool.default.keepAliveTimeMinutes 
# 线程池统计指标的时间，默认10000
#hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 
# 将rolling window划分为n个buckets，默认10
#hystrix.threadpool.default.metrics.rollingStats.numBuckets    