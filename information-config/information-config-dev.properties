### SpringCloud默认开启ribbon
# Ribbon连接超时
ribbon.ConnectTimeout=2000
# Ribbon响应超时(建立连接后从服务器读取到可用资源所用时间)
ribbon.ReadTimeout=5000

### 开启Hystrix断路器
feign.hystrix.enabled=true

### Hystrix 配置
# 这样将会自动配置一个 Hystrix 并发策略插件的 hook，这个 hook 会将 SecurityContext 从主线程传输到 Hystrix 的命令。
# 因为 Hystrix 不允许注册多个 Hystrix 策略，所以可以声明 HystrixConcurrencyStrategy
# 为一个 Spring bean 来实现扩展。Spring Cloud 会在 Spring 的上下文中查找你的实现，并将其包装在自己的插件中。
#hystrix.shareSecurityContext=true
# 当在配置时间窗口内达到此数量的失败后，进行短路。默认20个
#hystrix.command.default.circuitBreaker.requestVolumeThreshold=1
# 触发短路的时间值，当该值设为5000时，则当触发 circuit break 后的5000毫秒内都会拒绝request
# 也就是5000毫秒后才会关闭circuit。默认5000
#hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=15000
# 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false
#hystrix.command.default.circuitBreaker.forceOpen=false
# 强制关闭熔断器 如果这个开关打开，circuit将一直关闭且忽略，默认false
#hystrix.command.default.circuitBreaker.forceClosed=false
# 熔断器超时时间，默认：1000毫秒
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000
# 具体方法的超时时间
#hystrix.command.serverMethod.execution.isolation.thread.timeoutInMilliseconds=5000
